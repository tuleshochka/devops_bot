---
- name: db Playbook
  hosts: db_host
  become: yes
  tasks:

    - name: Apt update
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400
      become: yes

    - name: Install packages
      ansible.builtin.apt:
        name:
          - postgresql
          - postgresql-contrib
          - python3
          - python3-dev
          - python3-pip
          - jq
      become: yes

    - name: Creates directory
      ansible.builtin.file:
        path: /oracle/pg_data/archive
        owner: postgres
        group: postgres
        state: directory
      become: yes

    - name: Check PostgreSQL service
      service:
        name: postgresql
        state: started
        enabled: true

    - name: Get PostgreSQL version
      ansible.builtin.shell: "pg_lsclusters --json | jq -r '.[].version'"
      register: pg_version

    - name: Config PostgreSQL HBA
      ansible.builtin.blockinfile:
        path: /etc/postgresql/{{pg_version.stdout}}/main/pg_hba.conf
        append_newline: true
        prepend_newline: true
        block: "host replication {{DB_REPL_USER}} {{DB_REPL_HOST}}/24 scram-sha-256"
      become: yes
      become_user: root


    - name: Change PostgreSQL config
      ansible.builtin.blockinfile:
        path: /etc/postgresql/{{pg_version.stdout}}/main/postgresql.conf
        append_newline: true
        prepend_newline: true
        block: | 
          listen_addresses = '*'
          port = {{DB_PORT}}
          log_destination = 'stderr'
          logging_collector = on
          log_directory = '/var/log/postgresql/'
          log_filename = 'postgresql.log'
          log_file_mode = 0644
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          log_replication_commands = on
      become: yes

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
      become: yes

    - name: Create user
      community.postgresql.postgresql_user:
        name: "{{DB_USER}}"
        password: "{{DB_PASSWORD}}"
      become_user: postgres

    - name: Creating database
      community.postgresql.postgresql_db:
        name: "{{ DB_DATABASE }}"
      become: yes
      become_user: postgres

    - name: Creating emails table
      community.postgresql.postgresql_table:
        db: "{{ DB_DATABASE }}"
        name: emails
        columns:
          - id serial primary key
          - email text
      become: yes
      become_user: postgres

    - name: Creating phone-numbers table
      community.postgresql.postgresql_table:
        db: "{{ DB_DATABASE }}"
        name: phone_numbers
        columns:
          - id serial primary key
          - phone text
      become: yes
      become_user: postgres

    - name: Change postgres_password
      community.postgresql.postgresql_user:
        name: "{{DB_USER}}"
        password: "{{DB_PASSWORD}}"
      become: yes
      become_user: postgres

    - name: Grant all permisions to tables
        postgresql_privs:
          db: "{{DB_DATABASE}}"
          role: "{{DB_USER}}"
          objs: ALL_IN_SCHEMA
          privs: SELECT,INSERT,UPDATE,DELETE
        become_user: postgres

    - name: Create repl_user
      community.postgresql.postgresql_user:
        name: "{{DB_REPL_USER}}"
        password: "{{DB_REPL_PASSWORD}}"
        role_attr_flags: REPLICATION,LOGIN,SUPERUSER
      become: yes
      become_user: postgres


- name: db_repl Playbook
  hosts: db_repl_host
  become: yes
  tasks:
    - name: Apt update
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400
      become: yes
    - name: Install Postgres
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - python3
          - python3-dev
          - python3-pip
          - jq
      become: yes

    - name: Check PostgreSQL service
      service:
        name: postgresql
        state: started
        enabled: true

    - name: Get PostgreSQL version
      ansible.builtin.shell: "pg_lsclusters --json | jq -r '.[].version'"
      register: pg_version

    - name: Change PostgreSQL config
      ansible.builtin.blockinfile:
        path: /etc/postgresql/{{pg_version.stdout}}/main/postgresql.conf
        append_newline: true
        prepend_newline: true
        block: | 
          listen_addresses = '*'
          port = {{DB_REPL_PORT}}
      become: yes
      become_user: root

    - name: Stop PostgreSQL
      service:
        name: postgresql
        state: stopped
      become: yes
      become_user: root

    - name: Get directory for backup
      ansible.builtin.shell: "pg_lsclusters --json | jq -r '.[].pgdata'"
      register: data_dir
      become: yes
      become_user: root

    - name: Clean up directory
      ansible.builtin.file:
        state: "{{item}}"
        path: "{{data_dir.stdout}}"
        owner: postgres
        group: postgres
        mode: 0750
      with_items:
        - absent
        - directory
      become: yes
      become_user: root

    - name: Execute pg_basebackup
      ansible.builtin.command:
        cmd: |
          pg_basebackup -v -R -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_REPL_USER}} -w -P -D {{data_dir.stdout}}
      become: yes
      become_user: postgres
      environment:
        PGPASSWORD: "{{ DB_REPL_PASSWORD }}"
      
    - name: Start PostgreSQL
      service:
        name: postgresql
        state: started
      become: yes
      become_user: root


- name: bot Playbook
  hosts: bot
  become: yes
  tasks:
    - name: Install packeges
      apt:
        name: 
          - postgresql-contrib
          - postgresql-common
          - python3
          - python3-dev
          - python3-pip
      become: yes

    - name: Install libraries 
      pip:                
        name:
          - python-telegram-bot==13.7
          - paramiko
          - psycopg2-binary
          - python-dotenv
      become: yes
      
    - name: Creating work dir
      ansible.builtin.file:
        path: /srv/devops_bot
        owner: ansible
        group: ansible
        state: directory
        mode: '0777'

    - name: Clone bot
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/tuleshochka/devops_bot/docker/bot_image/bot.py
        dest: /srv/devops_bot/bot.py
        mode: '0755'

    - name: Run bot
      ansible.builtin.command:
        cmd: python3 /srv/devops_bot/bot.py
      environment:
        TOKEN: "{{TOKEN}}"
        DB_HOST: "{{ DB_HOST }}"
        DB_USER: "{{ DB_USER }}"
        DB_PASSWORD: "{{ DB_PASSWORD }}"
        DB_DATABASE: "{{ DB_DATABASE }}"
        RM_HOST: "{{ RM_HOST }}"
        RM_PORT: "{{ RM_PORT }}"
        RM_USER: "{{ RM_USER }}"
        RM_PASSWORD: "{{ RM_PASSWORD }}"